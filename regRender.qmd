---
title: "Regression results"
editor: visual
---
## descriptives
```{r}
#| label: fw total
#| echo: false
#| include: false

source("C:/MyData/paper 1/2_habit_comb_food/R_comb_habit/R/00_read_clean_data.R")

{serving_spoon <- function(data, col_name){
  data %>% 
    mutate({{col_name}} := case_when(
      {{col_name}} == 1 ~ 25,
      {{col_name}} == 2 ~ 75,
      {{col_name}} == 3 ~ 150,
      {{col_name}} == 4 ~ 250,
      {{col_name}} == 5 ~ 350,
      TRUE ~ {{col_name}}
    ))
}

fruit_piece <- function(data, col_name){
  data %>% 
    mutate({{col_name}} := case_when(
      {{col_name}} == 1 ~ 25,
      {{col_name}} == 2 ~ 50,
      {{col_name}} == 3 ~ 100,
      {{col_name}} == 4 ~ 300,
      {{col_name}} == 5 ~ 500,
      TRUE ~ {{col_name}}
    ))
}

portion <- function(data, col_name){
  data %>% 
    mutate({{col_name}} := case_when(
      {{col_name}} == 1 ~ 75,
      {{col_name}} == 2 ~ 150,
      {{col_name}} == 3 ~ 375,
      {{col_name}} == 4 ~ 675,
      {{col_name}} == 5 ~ 900,
      TRUE ~ {{col_name}}
    ))
}
sandwich_portion <- function(data, col_name){
  data %>% 
    mutate({{col_name}} := case_when(
      {{col_name}} == 1 ~ 10,
      {{col_name}} == 2 ~ 20,
      {{col_name}} == 3 ~ 50,
      {{col_name}} == 4 ~ 90,
      {{col_name}} == 5 ~ 120,
      TRUE ~ {{col_name}}
    ))
}

bread <- function(data, col_name){
  data %>% 
    mutate({{col_name}} := case_when(
      {{col_name}} == 1 ~ 18,
      {{col_name}} == 2 ~ 35,
      {{col_name}} == 3 ~ 400,
      {{col_name}} == 4 ~ 800,
      {{col_name}} == 5 ~ 1200,
      TRUE ~ {{col_name}}
    ))
}

egg <- function(data, col_name){
  data %>% 
    mutate({{col_name}} := case_when(
      {{col_name}} == 1 ~ 30,
      {{col_name}} == 2 ~ 60,
      {{col_name}} == 3 ~ 150,
      {{col_name}} == 4 ~ 270,
      {{col_name}} == 5 ~ 360,
      TRUE ~ {{col_name}}
    ))
}

dairy_portion <- function(data, col_name){
  data %>% 
    mutate({{col_name}} := case_when(
      {{col_name}} == 1 ~ 38,
      {{col_name}} == 2 ~ 150,
      {{col_name}} == 3 ~ 500,
      {{col_name}} == 4 ~ 1000,
      {{col_name}} == 5 ~ 2000,
      TRUE ~ {{col_name}}
    ))
}

sauce <- function(data, col_name){
  data %>% 
    mutate({{col_name}} := case_when(
      {{col_name}} == 1 ~ 10,
      {{col_name}} == 2 ~ 30,
      {{col_name}} == 3 ~ 90,
      {{col_name}} == 4 ~ 225,
      {{col_name}} == 5 ~ 675,
      TRUE ~ {{col_name}}
    ))
}

df <- df %>% 
  serving_spoon(Q14) %>% 
  serving_spoon(veg) %>% 
  serving_spoon(pot) %>% 
  fruit_piece(fruit) %>% 
  portion(meat) %>% 
  sandwich_portion(Q9) %>% 
  bread(Q10) %>% 
  dairy_portion(Q12) %>% 
  egg(Q13) %>% 
  sauce(Q15)

df <- df %>% 
  mutate(fw_total = rowSums(select(., Q14:Q15), na.rm=TRUE))

label(df$fw_total) <- "Total food waste"
units(df$fw_total) <-  "g"

df$fw_total_log <- log(df$fw_total + 1)

df$anywaste <- ifelse(!is.na(df$Q1_31), 0, 1)
}
```

```{r}
#| label: descriptives habit
#| echo: false

df <- df %>%
  mutate(stock_hs = ifelse(int_b1 != 1 & freq_b1 != 1, rowMeans(select(., hs_b1_1:hs_b1_4), na.rm = TRUE), NA))
df <- df %>%
  mutate(left_hs = ifelse(Q38 != 1 & Q37 != 1, rowMeans(select(., Q40_1:Q40_4), na.rm = TRUE), NA))
df <- df %>%
  mutate(sense_hs = ifelse(Q43 != 1 & Q42 != 1, rowMeans(select(., Q45_1:Q45_4), na.rm = TRUE), NA))

df <- df %>% 
  mutate(psycap = rowMeans(select(.,CAP_1:CAP_5)))
df <- df %>% 
  mutate(phyopp = rowMeans(select(.,OPP_1:OPP_2)))
df <- df %>% 
  mutate(socopp = rowMeans(select(.,OPP_3:OPP_4)))
df <- df %>% 
  mutate(totopp = rowMeans(select(.,OPP_1:OPP_4)))
df <- df %>% 
  mutate(refmot = rowMeans(select(.,ref_mot_1_1:ref_mot_2_7)))
df <- df %>% 
  mutate(autmot = rowMeans(select(.,aut_mot_1_1:aut_mot_1_4)))

comb_items <- df %>% 
  select(CAP_1:aut_mot_1_4 & !c(att_1, ref_mot_1_2, ref_mot_1_5, ref_mot_2_4, ref_mot_2_5), fw_total_log, fw_total, stock_hs:sense_hs, psycap:autmot, age, adult, child, gender, edu, anywaste) %>% 
  drop_na()

stockcor <- df %>% 
  select(int_b1:hs_b1_4) %>% 
  cor(use="pairwise.complete.obs")

leftcor <- df %>% 
  select(Q38:Q40_4) %>% 
  cor(use="pairwise.complete.obs")

sensecor <- df %>% 
  select(Q43:Q45_4 & !att) %>% 
  cor(use="pairwise.complete.obs")

stockdesc <- df %>% 
  select(int_b1:hs_b1_4) %>% 
  describe() %>% 
  as_tibble(rownames = "item") %>% 
  select(mean, sd, median) 

leftdesc <- df %>% 
  select(Q38:Q40_4) %>% 
  describe() %>% 
  as_tibble(rownames = "item") %>% 
  select(mean, sd, median)

sensedesc <- df %>% 
  select(Q43:Q45_4 & !att) %>% 
  describe() %>% 
  as_tibble(rownames = "item") %>% 
  select(mean, sd, median)

stock_tab <- kable(cbind(stockdesc, stockcor), digits = 2) %>% 
  add_header_above(c(" " = 1, "Descriptives" = 3, "Correlation matrix" = 6))

left_tab <- kable(cbind(leftdesc, leftcor), digits = 2) %>% 
  add_header_above(c(" " = 1, "Descriptives" = 3, "Correlation matrix" = 6))

sense_tab <- kable(cbind(sensedesc, sensecor), digits = 2)%>% 
  add_header_above(c(" " = 1, "Descriptives" = 3, "Correlation matrix" = 6))

```
The questions are the following:

- I do behaviour x *(disagree - agree; 7pt)*
- In a typical month I do behaviour x *(never - always; 5pt)*
- behaviour x is something I do automatically *(disagree - agree; 7pt)*
- behaviour x is something I do without thinking *(disagree - agree; 7pt)*
- behaviour x  I do without having to consciously remember *(disagree - agree; 7pt)*
- behaviour x is something I start doing before I realise I am doing it *(disagree - agree; 7pt)*

**Stock taking items**
```{r}
#| echo: false
stock_tab
```

**Leftover saving items**
```{r}
#| echo: false
left_tab
```

**Using senses**
```{r}
#| echo: false
sense_tab
```

### Leftover saving
```{r}
#| label: leftover habit
#| code-fold: true
left_hs_fit <- lm(left_hs ~ gender + edu, data = comb_items)
left_hs_fit2 <- lm(left_hs ~ gender + edu + phyopp + socopp + psycap + refmot + autmot, data = comb_items)
summary_left <- summary(left_hs_fit)
kable(tidy(anova(left_hs_fit, left_hs_fit2)))
kable(tidy(anova(left_hs_fit2)), digits = 2)
```

R squared = `r round(summary_left$r.squared,2)`
R squared change = `r round(summary(left_hs_fit2)$r.squared - summary(left_hs_fit)$r.squared,2)`

### Using senses
```{r}
#| label: sense habit
#| code-fold: true
sense_hs_fit <- lm(sense_hs ~ phyopp + socopp + psycap + refmot + autmot, data = comb_items)
summ_sense <- summary(sense_hs_fit)
kable(tidy(summary(sense_hs_fit)), digits = 2)

```
R squared = `r round(summ_sense$r.squared,2)`

### Checking stock
```{r}
#| label: stock habit
#| code-fold: true
stock_hs_fit <- lm(stock_hs ~ phyopp + socopp + psycap + refmot + autmot, data = comb_items)
summ_stock <- summary(stock_hs_fit)
kable(tidy(summary(stock_hs_fit)), digits = 2)
```
R squared = `r round(summ_stock$r.squared,2)`

## Predicting food waste

Regression results dv log food waste, including people who waste nothing
```{r}
#| label: fw habit
#| code-fold: true
fw_hs_fit1 <- lm(fw_total_log ~ age + child + adult, data = comb_items)
fw_hs_fit2 <- lm(fw_total_log ~ age + child + adult + left_hs + sense_hs + stock_hs, data = comb_items)
summ_fw_hs <- summary(fw_hs_fit2)
hmrfw <- anova(fw_hs_fit1, fw_hs_fit2)
kable(tidy(summary(fw_hs_fit2)), digits = 2)
kable(tidy(hmrfw))
plot(fw_hs_fit1, 1)
```
R squared change = `r summary(fw_hs_fit2)$r.squared - summary(fw_hs_fit1)$r.squared`

This has some problems, like the following durbin watson test results

`r kable(tidy(dwt(fw_hs_fit2)))`

<details>
<summary>Regression excluding people who waste nothing</summary>

```{r}
fw_comb_filter <- comb_items %>% filter(fw_total_log != 0)
fwf_hs_fit1 <- lm(fw_total_log ~ age + child + adult, data = fw_comb_filter)
fwf_hs_fit2 <- lm(fw_total_log ~ age + child + adult + left_hs + sense_hs + stock_hs, data = fw_comb_filter)
summ_fwf_hs <- summary(fwf_hs_fit2)
kable(tidy(summary(fwf_hs_fit2)), digits = 2)
kable(tidy(anova(fwf_hs_fit1, fwf_hs_fit2))) 
p1 <- plot(fwf_hs_fit2, 1)
```
this one does not have dwt problems

`r kable(tidy(dwt(fwf_hs_fit2)))`
</details>

<details>
<summary>Regression with dependent variable if someone has wasted anything at all</summary>
```{r}
fwn_hs_fit2 <- glm(anywaste ~ age + child + adult + left_hs + sense_hs + stock_hs, family = "binomial", data = comb_items) 
kable(tidy(fwn_hs_fit2), digits = 2)
```
</details>